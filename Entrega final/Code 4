#Para correr modelo SLX
# Instalar librerías necesarias
!pip install geopandas libpysal spreg
!pip install geopandas libpysal contextily matplotlib --quiet
!pip install geopandas pysal

# Instalar librerías necesarias
!pip install geopandas libpysal spreg --quiet

!pip install contextily --quiet

# Importar librerías
import geopandas as gpd
import numpy as np
from pysal.lib import weights
from spreg import OLS
from google.colab import files

# Subir archivo GeoJSON
uploaded = files.upload()

# Cargar archivo (ajusta el nombre si es diferente)
filename = list(uploaded.keys())[0]
gdf = gpd.read_file(filename)
gdf = gdf.to_crs(epsg=4326)

# Crear variable binaria si no existe
if 'DESBORDE_BIN' not in gdf.columns:
    gdf['DESBORDE_BIN'] = gdf['DESBORDE'].astype(int)

# Definir variables explicativas incluyendo drenaje
vars_explicativas = ['TIA', 'PPT', 'COTA', 'longitud_tramo_cercano', 'densidad_drenaje']

# Eliminar nulos
gdf_clean = gdf.dropna(subset=['DESBORDE_BIN'] + vars_explicativas).copy()
gdf_clean.reset_index(drop=True, inplace=True)

# Crear coordenadas para matriz espacial
coords = list(zip(gdf_clean.geometry.x, gdf_clean.geometry.y))

# Crear matriz de pesos espaciales (KNN con 6 vecinos)
w = weights.KNN(coords, k=6)
w.transform = 'r'

# Crear lag espacial de las variables explicativas
WX = weights.lag_spatial(w, gdf_clean[vars_explicativas])
X_comb = np.hstack([gdf_clean[vars_explicativas].values, WX])
WX_names = [f"W_{var}" for var in vars_explicativas]
all_vars = vars_explicativas + WX_names

# Variable dependiente
y = gdf_clean[['DESBORDE_BIN']].values

# Ajustar modelo SLX
modelo_slx_drenaje = OLS(y, X_comb, name_y='DESBORDE_BIN', name_x=all_vars)

# Mostrar resumen del modelo
print(modelo_slx_drenaje.summary)


import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
import contextily as ctx
from pysal.lib import weights
from spreg import OLS

# Verificar si 'prediccion_slx' existe
if 'prediccion_slx' not in gdf_clean.columns:
    vars_explicativas = ['TIA', 'PPT', 'COTA', 'longitud_tramo_cercano', 'densidad_drenaje']
    coords = list(zip(gdf_clean.geometry.x, gdf_clean.geometry.y))
    w = weights.KNN(coords, k=6)
    w.transform = 'r'
    WX = weights.lag_spatial(w, gdf_clean[vars_explicativas])
    X_comb = np.hstack([gdf_clean[vars_explicativas].values, WX])
    WX_names = [f"W_{var}" for var in vars_explicativas]
    all_vars = vars_explicativas + WX_names
    y = gdf_clean[['DESBORDE_BIN']].values
    modelo_slx_drenaje = OLS(y, X_comb, name_y='DESBORDE_BIN', name_x=all_vars)
    gdf_clean['prediccion_slx'] = modelo_slx_drenaje.predy.flatten()

# Reproyectar y graficar
gdf_clean = gdf_clean.to_crs(epsg=3857)
fig, ax = plt.subplots(1, 1, figsize=(12, 10))
gdf_clean.plot(column='prediccion_slx', cmap='viridis', legend=True, ax=ax, edgecolor='black', markersize=80)
ctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron)
ax.set_axisbelow(True)
ax.grid(True, which='both', color='gray', linestyle='--', linewidth=0.5)
ax.set_title('Mapa de Predicción de Desbordes - Modelo SLX', fontsize=14)
ax.set_axis_off()
plt.tight_layout()
plt.show()


!pip install contextily --quiet


import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata

# Reproyectar a Web Mercator
gdf_clean = gdf_clean.to_crs(epsg=3857)
gdf_red = gdf_red.to_crs(epsg=3857)

# Interpolación para cubrir toda la red
x = gdf_clean.geometry.x
y = gdf_clean.geometry.y
z = gdf_clean['prediccion_slx']

# Usar límites de la red para definir la malla
xmin, ymin, xmax, ymax = gdf_red.total_bounds
xi = np.linspace(xmin, xmax, 500)
yi = np.linspace(ymin, ymax, 500)
xi, yi = np.meshgrid(xi, yi)

# Interpolación
zi = griddata((x, y), z, (xi, yi), method='cubic')

# Graficar
fig, ax = plt.subplots(figsize=(12, 10))

# Campo interpolado
c = ax.imshow(zi, extent=(xmin, xmax, ymin, ymax), origin='lower', cmap='viridis', alpha=0.7)

# Red de drenaje con grosor ajustable
gdf_red.plot(ax=ax, color='blue', linewidth=0.5, label='Red de Drenaje')  # cambia linewidth para ajustar grosor

# Estaciones como puntos rojos
gdf_clean.plot(ax=ax, color='red', markersize=20, label='Estaciones')

# Estilo
plt.colorbar(c, ax=ax, label='Predicción SLX')
ax.set_title('Mapa de Predicción Interpolado sobre Red de Drenaje')
ax.legend()
ax.set_axisbelow(True)
ax.grid(True, which='both', color='gray', linestyle='--', linewidth=0.5)
plt.tight_layout()
plt.show()
